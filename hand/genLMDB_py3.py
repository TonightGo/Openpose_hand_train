import scipy.io as sio
import numpy as np
import json
import cv2
import lmdb
import caffe
import os.path
import struct
import sys
sys.path.insert(0, '/home/ice/project/caffe-cpm/python')

error_data = ["00001933", "00004657", "00004055", "00002660", "00001315", "00000601", "00004639", "00001748", "00000376", "00004673", "00003943", "00004635", "00001771", "00001934",
			  "00001296", "00003944", "00004841", "00001586", "00002901", "00000227", "00003938", "00002289", "00004867", "00001021", "00001914", "00001044", "00004090", "00003423",
			  "00003942", "00003942", "00003942", "00002308", "00004644", "00002307", "00003885", "00003940", "00002412", "00002673", "00003945", "00003554", "00002490", "00001861",
			  "00004937", "00001390", "00000410", "00002295", "00003915", "00003645", "00002277", "00002276", "00004089", "00003424", "00003421", "00001836", "00003929", "00000431",
			  "00000437", "00001046", "00004084", "00003899", "00003559", "00004092", "00000868", "00000753", "00000433", "00003675", "00003553", "00000379", "00002776", "00001312",
			  "00002502", "00003422", "00001868", "00002498", "00002312", "00001313", "00002291", "00003894", "00003933", "00004844", "00004091", "00003900", "00000306", "00000448",
			  "00001921", "00001059", "00001931", "00002109", "00004674", "00003443", "00000243", "00003440", "00004652", "00000310", "00003916", "00004075", "00000244", "00004065",
			  "00001291", "00002274", "00001929", "00001943", "00004675", "00000436", "00000425", "00003935", "00004294", "00002004", "00001780", "00002666", "00003551", "00003932",
			  "00004093", "00002306", "00002310", "00004086", "00001295", "00004668", "00002278", "00004667", "00003923", "00003917", "00000413", "00004676", "00002122", "00001045",
			  "00000414", "00001920", "00003123", "00003439", "00002267", "00004087", "00003442", "00000873", "00000261", "00002838", "00001007", "00003321", "00001057", "00003446",
			  "00001930", "00001747", "00001023", "00000598", "00000305", "00003918", "00001305", "00000412", "00003441", "00003893", "00004649", "00002467", "00000222", "00004866",
			  "00004292", "00000432", "00001990", "00000430", "00002677", "00000447", "00001765", "00001324", "00002260", "00004060", "00001744", "00004598", "00002092", "00009383",
			  "00006727", "00006446", "00006767", "00006761", "00008582", "00006416", "00005064", "00006690", "00007825", "00008113", "00008487", "00005541", "00006895", "00005966",
			  "00006721", "00008791", "00006663", "00005771", "00006886", "00009397", "00009773", "00006440", "00006267", "00007710", "00008500", "00009187", "00006246", "00006208",
			  "00007439", "00005387", "00008107", "00006434", "00006315", "00008438", "00005914", "00006283", "00006610", "00009803", "00009108", "00008412", "00006898", "00005063",
			  "00005874", "00006938", "00008365", "00007189", "00006908", "00006412", "00005033", "00008808", "00008662", "00008942", "00008773", "00008991", "00009230", "00007817",
			  "00005897", "00009496", "00005673", "00005318", "00007437", "00005506", "00008485", "00006977", "00006845", "00006664", "00008604", "00008715", "00006257", "00008528",
			  "00006818", "00005769", "00006269", "00007398", "00007483", "00005221", "00008070", "00008138", "00007667", "00005553", "00006662", "00008733", "00008744", "00006497",
			  "00006408", "00008836", "00005802", "00007128", "00007328", "00009617", "00009009", "00006256", "00006272", "00008195", "00006762", "00009170", "00007708", "00008066",
			  "00006034", "00005035", "00006400", "00005494", "00009062", "00009393", "00009967", "00008266", "00005824", "00008642", "00005482", "00007871", "00007660", "00005797",
			  "00006722", "00005867", "00008584", "00009495", "00009884", "00006712", "00008765", "00005300", "00005555", "00005547", "00007154", "00006108", "00005502", "00005419",
			  "00005296", "00007482", "00009183", "00008540", "00007378", "00006909", "00007207", "00007833", "00005356", "00008787", "00009049", "00009394", "00006835", "00009250",
			  "00009487", "00009902", "00009127", "00007177", "00008216", "00009802", "00008526", "00007716", "00007626", "00007904", "00007678", "00006111", "00005488", "00007560",
			  "00007968", "00005578", "00006778", "00006197", "00009500", "00008800", "00009944", "00007691", "00007577", "00005548", "00008751", "00008064", "00009112", "00007420",
			  "00007703", "00008382", "00009868", "00007315", "00006106", "00009457", "00009045", "00007484", "00005130", "00006543", "00005230", "00008997", "00008581", "00006896",
			  "00006498", "00008327", "00006571", "00008756", "00008625", "00007151", "00005317", "00009414", "00007606", "00006724", "00006841", "00009351", "00006282", "00006266",
			  "00008776", "00006709", "00008623", "00009755", "00007938", "00008069", "00007332", "00006101", "00007675", "00008016", "00008783", "00009346", "00009377", "00008637",
			  "00005351", "00008538", "00005586", "00005618", "00008431", "00007628", "00008265", "00006253", "00005604", "00005809", "00009109", "00005535", "00005810", "00005037",
			  "00008194", "00007001", "00005556", "00007002", "00006726", "00007143", "00007192", "00009107", "00009807", "00009484", "00006383", "00006973", "00005256", "00006258",
			  "00008788", "00008359", "00008530", "00005298", "00005873", "00008096", "00009760", "00007415", "00005390", "00007361", "00007960", "00007164", "00009090", "00006245",
			  "00007688", "00009220", "00008071", "00005396", "00009522", "00008063", "00006495", "00007709", "00007334", "00009801", "00008610", "00009188", "00005817", "00008302",
			  "00008462", "00009231", "00009772", "00005510", "00005559", "00009249", "00005892", "00006243", "00007322", "00007674", "00009525", "00009392", "00008985", "00009895",
			  "00008490", "00008014", "00008463", "00009213", "00005132", "00007157", "00009395", "00007774", "00007830", "00007961", "00005405", "00007232", "00005770", "00006260",
			  "00009134", "00006203", "00008537", "00008585", "00009072", "00007715", "00005533", "00006971", "00008190", "00009058", "00008161", "00005546", "00006570", "00007685",
			  "00005032", "00006700", "00005543", "00007299", "00006452", "00009063", "00006681", "00008009", "00005803", "00008466", "00006264", "00007563", "00008690", "00009226",
			  "00008326", "00009517", "00005036", "00008998", "00005472", "00005053", "00005388", "00008460", "00008130", "00008291", "00007477", "00008387", "00008583", "00006094",
			  "00008603", "00006736", "00005487", "00007140", "00007324", "00007485", "00005061", "00008196", "00005534", "00006252", "00006399", "00007772", "00005118", "00006442",
			  "00006541", "00008653", "00005908", "00009175", "00005307", "00008617", "00008320", "00008458", "00008148", "00006893", "00007144", "00008647", "00008040", "00009975",
			  "00008944", "00009235", "00007689", "00008559", "00005815", "00005503", "00007131", "00005674", "00005737", "00005606", "00005517", "00006745", "00005915", "00009371",
			  "00007421", "00005898", "00007661", "00008345", "00007304", "00009550", "00007096", "00006313", "00008661", "00008068", "00005297", "00009749", "00008199", "00007190",
			  "00006307", "00008221", "00007162", "00008498", "00008218", "00007260", "00005611", "00006433", "00005056", "00005861", "00008065", "00006927", "00009013", "00008789",
			  "00005389", "00005562", "00005732", "00005311", "00008774", "00005066", "00006834", "00007673", "00006507", "00006688", "00005868", "00005663", "00009370", "00007538",
			  "00007964", "00008129", "00009649", "00009184", "00007045", "00009110", "00008445", "00009974", "00007375", "00008921", "00005934", "00005357", "00009014", "00006713",
			  "00009798", "00007864", "00007965", "00005683", "00007514", "00009087", "00007346", "00009070", "00005685", "00006107", "00008202", "00009758", "00009948", "00005686",
			  "00007677", "00009089", "00008364", "00007406", "00005255", "00005429", "00005955", "00006317", "00005507", "00005435", "00005338", "00006204", "00007773", "00006309",
			  "00005818", "00005131", "00009996", "00006701", "00006109", "00008217", "00006693", "00007261", "00008191", "00006421", "00007856", "00008895", "00008926", "00007353",
			  "00009133", "00005558", "00006692", "00008831", "00009211", "00008193", "00007336", "00009367", "00008112", "00008162", "00008415", "00008793", "00008531", "00005858",
			  "00008515", "00007243", "00008410", "00007966", "00008435", "00008853", "00006096", "00009212", "00008507", "00008348", "00007145", "00008650", "00009389", "00007576",
			  "00009554", "00005457", "00009551", "00008465", "00008461", "00005661", "00006728", "00006273", "00008122", "00007212", "00007554", "00008015", "00008987", "00008042",
			  "00006976", "00009077", "00007605", "00005859", "00007745", "00005049", "00006760", "00006473", "00006087", "00005052", "00005436", "00007215", "00005050", "00009001",
			  "00005619", "00006694", "00007828", "00008782", "00009031", "00006563", "00008522", "00007643", "00005062", "00006765", "00005692", "00008893", "00009805", "00005496",
			  "00005804", "00006262", "00008525", "00006308", "00005480", "00008426", "00006086", "00008056", "00009017", "00009340", "00006929", "00008388", "00007694", "00007327",
			  "00005426", "00007030", "00007097", "00006833", "00005620", "00009833", "00008038", "00005603", "00009399", "00007711", "00007349", "00006167", "00007165", "00007146",
			  "00008927", "00007714", "00009886", "00005425", "00008729", "00008159", "00007815", "00006546", "00006100", "00005870", "00007359", "00006816", "00008198", "00006263",
			  "00007184", "00009228", "00008235", "00008533", "00009783", "00007543", "00005693", "00007225", "00009007", "00007766", "00009363", "00008201", "00009223", "00008259",
			  "00005423", "00009931", "00008842", "00008188", "00008436", "00006978", "00007767", "00008041", "00005779", "00008390", "00006671", "00009061", "00005031", "00007060",
			  "00005913", "00008046", "00005860", "00006979", "00007876", "00005662", "00007939", "00009082", "00005428", "00005430", "00008017", "00009111", "00009951", "00007185",
			  "00008534", "00005401", "00005493", "00008132", "00005054", "00008240", "00007191", "00007544", "00007552", "00006357", "00008624", "00008459", "00007624", "00009182",
			  "00005518", "00006506", "00005688", "00009091", "00009716", "00008643", "00008054", "00007832", "00007975", "00007440", "00007834", "00009552", "00007933", "00007702",
			  "00009169", "00006085", "00006445", "00008723", "00007583", "00008135", "00007762", "00005959", "00007988", "00005315", "00005657", "00008258", "00008297", "00005418",
			  "00006508", "00006846", "00008464", "00006432", "00005051", "00009499", "00009840", "00009523", "00006965", "00005609", "00008801", "00007335", "00005573", "00007305",
			  "00005929", "00008324", "00009557", "00006244", "00009962", "00005249", "00005250", "00008189", "00008439", "00006827", "00007139", "00006448", "00005954", "00006505",
			  "00005299", "00007672", "00006098", "00006254", "00006265", "00007262", "00006070", "00005492", "00006542", "00007397", "00006763", "00008067", "00006533", "00007206",
			  "00009152", "00005717", "00005550", "00009218", "00009125", "00009241", "00008911", "00005626", "00006259", "00005841", "00007370", "00006897", "00008298", "00009774",
			  "00008639", "00005711", "00007259", "00005038", "00006720", "00006921", "00008521", "00005677", "00006509", "00008550", "00005961", "00006284", "00009683", "00009558",
			  "00006972", "00006456", "00008539", "00007831", "00007633", "00007670", "00005251", "00006499", "00005675", "00005525", "00009245", "00008609", "00007905", "00007717",
			  "00008052", "00008491", "00008115", "00007501", "00005522", "00008956", "00007751", "00007358", "00008805", "00009128", "00005872", "00009167", "00008358", "00005678",
			  "00009643", "00006095", "00009037", "00008051", "00005899", "00006205", "00005446", "00007669", "00007649", "00007438", "00009196", "00007376", "00005672", "00008996",
			  "00005554", "00009963", "00009059", "00007345", "00009914", "00006840", "00007347", "00009195", "00008652", "00007713", "00005816", "00006271", "00005831", "00008486",
			  "00005705", "00009068", "00008979", "00009116", "00008019", "00007377", "00008775", "00005738", "00009243", "00006832", "00008283", "00009762", "00008411", "00005544",
			  "00009041", "00005829", "00008160", "00005422", "00006782", "00006239", "00009350", "00008123", "00005967", "00005744", "00006314", "00009336", "00009092", "00007153",
			  "00009822", "00008145", "00009244", "00006141", "00008036", "00008157", "00009900", "00005893", "00009263", "00006067", "00007668", "00006105", "00009124", "00007963",
			  "00008532", "00005866", "00008696", "00009171", "00005434", "00007676", "00007233", "00008651", "00005889", "00009520", "00009513", "00007763", "00008758", "00006860",
			  "00006810", "00006035", "00007607", "00007228", "00007333", "00005310", "00009784", "00005540", "00006547", "00007216", "00008868", "00005909", "00006766", "00009538",
			  "00006611", "00009374", "00007683", "00006237", "00006238", "00005778", "00005777", "00006974", "00009239", "00007798", "00007662", "00009553", "00006110", "00008165",
			  "00005684", "00005427", "00009221", "00007209", "00008757", "00008524", "00006441", "00009896", "00006729", "00009682", "00007231", "00008992", "00006861", "00006453",
			  "00007211", "00008993", "00009357", "00005895", "00006970", "00005599", "00009780", "00007650", "00009949", "00009759", "00009804", "00008437", "00008351", "00005316",
			  "00006894", "00009478", "00006413", "00005676", "00006695", "00009012", "00009270", "00005871", "00009200", "00006613", "00009317", "00009176", "00006706", "00007105",
			  "00007739", "00007809", "00006268", "00007410", "00007627", "00006444", "00005122", "00009364", "00006472", "00009510", "00006682", "00008767", "00009849", "00007776",
			  "00006407", "00005808", "00005511", "00009088", "00005402", "00008945", "00007679", "00006424", "00007824", "00008759", "00009222", "00007654", "00009217", "00009197",
			  "00006612", "00005312", "00007161", "00008427", "00005820", "00005960", "00006377", "00005656", "00009679", "00006471", "00008894", "00005408", "00005664", "00007879",
			  "00006504", "00008131", "00007321", "00006851", "00006255", "00006711", "00007701", "00009003", "00009380", "00008263", "00006691", "00006940", "00007591", "00006289",
			  "00009198", "00006020", "00008325", "00008814", "00006600", "00006899", "00006577", "00009168", "00005807", "00005542", "00009793", "00007129", "00005894", "00009232",
			  "00008649", "00007573", "00007141", "00005397", "00006789", "00008536", "00008778", "00006099", "00006826", "00007878", "00006815", "00009674", "00008809", "00007690",
			  "00006468", "00006644", "00005495", "00007147", "00008489", "00008488", "00008264", "00009765", "00009115", "00005965", "00007956", "00008413", "00006185", "00006847",
			  "00009094", "00008527", "00005557", "00009313", "00006261", "00006937", "00009369", "00008158", "00006764", "00008986", "00008121", "00009932", "00006680", "00008005",
			  "00008807", "00008044", "00007771", "00008554", "00009352", "00007746", "00009508", "00009574", "00008764", "00009546", "00009382", "00009185", "00009356", "00006316",
			  "00005319", "00009199", "00005006", "00008496", "00009743", "00005433", "00009123", "00005432", "00007822", "00009040", "00005869", "00008136", "00005391", "00006240",
			  "00009771", "00005352", "00005424", "00007600", "00008053", "00006447", "00006331", "00006844", "00006202", "00006115", "00009505", "00007188", "00008960", "00006019",
			  "00009205", "00009885", "00009424", "00009387", "00006609", "00008790", "00005907", "00008529", "00008910", "00005393", "00006198", "00005891", "00006404", "00008718",
			  "00007757", "00008766", "00009650", "00008999", "00008913", "00006615", "00008811", "00005896", "00006196", "00006569", "00006311", "00007814", "00009246", "00009598",
			  "00006028", "00008137", "00009398", "00006214", "00009797", "00008695", "00008972", "00009362", "00006656", "00009806", "00008197", "00006459", "00007958", "00005819",
			  "00006702", "00008523", "00007561", "00007682", "00006725", "00005028", "00007099", "00008200", "00007199", "00006703", "00007877", "00009968", "00008648", "00007142",
			  "00008375", "00006704", "00009366", "00009637", "00005059", "00008508", "00009155", "00009192", "00009018", "00005448", "00006966", "00006723", "00006451", "00008414",
			  "00005545", "00005114", "00009763", "00005627", "00006654", "00008440", "00005617", "00008004", "00008262", "00008035", "00007166", "00007360", "00006913", "00008697",
			  "00006699", "00008638", "00006689", "00009425", "00006705", "00006438", "00005687", "00006152", "00006670", "00006312", "00009354", "00008995", "00006270", "00009800",
			  "00005481", "00005890", "00008047", "00009824", "00007967", "00009820", "00007634", "00006403", "00008428", "00006188", "00005605", "00005152", "00007955", "00009129",
			  "00007227", "00006630", "00006491", "00007198", "00006614", "00007648", "00009990", "00009148", "00009673", "00008497", "00005513", "00005962", "00006657", "00007816",
			  "00009214", "00005231", "00006520", "00009219", "00006027", "00005431", "00006288", "00007295", "00007957", "00009461", "00008636", "00009000", "00008139", "00006687",
			  "00009002", "00008535", "00006022", "00009929", "00009901", "00009189", "00006496", "00009493", "00008520", "00009144", "00009684", "00006251", "00006457", "00006752",
			  "00005682", "00009391", "00008577", "00011743", "00013970", "00012687", "00012355", "00012306", "00011099", "00011989", "00014294", "00012523", "00012495", "00013650",
			  "00013807", "00013179", "00013667", "00010208", "00013610", "00014466", "00014760", "00013174", "00011423", "00014006", "00010840", "00012130", "00010879", "00011392",
			  "00013183", "00012607", "00012676", "00014461", "00011427", "00012490", "00013041", "00013194", "00012297", "00010490", "00011744", "00011501", "00010473", "00010920",
			  "00014365", "00011613", "00013750", "00012573", "00012024", "00010433", "00011149", "00013701", "00012747", "00010957", "00013737", "00014488", "00010227", "00013629",
			  "00012482", "00010526", "00013186", "00012575", "00010629", "00011862", "00010958", "00013924", "00013203", "00011649", "00013503", "00013192", "00011126", "00010061",
			  "00011291", "00010293", "00012836", "00014429", "00011644", "00011582", "00013073", "00014186", "00012362", "00013202", "00011592", "00011120", "00013948", "00010952",
			  "00013515", "00013605", "00010885", "00013570", "00011888", "00011131", "00013205", "00010826", "00012382", "00012200", "00013841", "00013526", "00013276", "00012924",
			  "00013465", "00014116", "00013941", "00011783", "00012694", "00013256", "00012526", "00011036", "00014234", "00013380", "00010485", "00013383", "00011702", "00014440",
			  "00014355", "00011832", "00013749", "00012655", "00012555", "00012966", "00011580", "00011451", "00011460", "00010390", "00011944", "00012216", "00014058", "00012894",
			  "00012846", "00011626", "00012003", "00011524", "00011671", "00014570", "00012918", "00013201", "00010675", "00011277", "00013777", "00014360", "00010480", "00013646",
			  "00011961", "00011766", "00011736", "00011223", "00014357", "00012379", "00014408", "00010020", "00011629", "00012596", "00010141", "00013978", "00011482", "00013477",
			  "00013270", "00012521", "00010255", "00011313", "00011654", "00012530", "00012812", "00011503", "00014598", "00010955", "00010765", "00010559", "00012605", "00010525",
			  "00014457", "00013719", "00011589", "00011718", "00012692", "00011027", "00010542", "00010215", "00014229", "00014649", "00013258", "00011078", "00011111", "00012494",
			  "00012712", "00012117", "00012833", "00013943", "00013240", "00010276", "00013641", "00012361", "00013143", "00012653", "00011900", "00013944", "00013721", "00012102",
			  "00012882", "00010349", "00010009", "00011746", "00013265", "00012741", "00012585", "00011030", "00012977", "00013272", "00010382", "00013811", "00010023", "00010140",
			  "00013233", "00010732", "00013652", "00013106", "00010601", "00011662", "00013352", "00014218", "00011146", "00014060", "00010384", "00012732", "00012328", "00013552",
			  "00012594", "00012775", "00010099", "00011095", "00012086", "00014200", "00011304", "00012087", "00010363", "00013951", "00010033", "00012522", "00010588", "00011559",
			  "00010298", "00013262", "00013040", "00014563", "00012689", "00010762", "00012925", "00014752", "00010221", "00011731", "00010834", "00014325", "00011142", "00013304",
			  "00012251", "00012671", "00014216", "00013528", "00011092", "00011988", "00010258", "00010348", "00011719", "00010423", "00010003", "00011538", "00010476", "00010749",
			  "00012907", "00012415", "00010427", "00010750", "00014231", "00010564", "00010508", "00010245", "00010608", "00012075", "00011228", "00014070", "00013113", "00014199",
			  "00011636", "00014459", "00010442", "00014455", "00013876", "00011601", "00012325", "00012352", "00010633", "00011081", "00012195", "00013961", "00012106", "00010059",
			  "00011759", "00010497", "00010317", "00010022", "00010587", "00010152", "00012615", "00010439", "00012845", "00011806", "00011817", "00011143", "00011785", "00013575",
			  "00013019", "00013930", "00010919", "00011953", "00010632", "00012842", "00013072", "00011768", "00013520", "00011917", "00011847", "00012245", "00011083", "00011485",
			  "00013066", "00013764", "00011558", "00012366", "00014141", "00011761", "00013365", "00012334", "00011639", "00013197", "00010784", "00011842", "00010774", "00011306",
			  "00013260", "00012187", "00010766", "00010088", "00012089", "00011282", "00014596", "00013878", "00013182", "00014004", "00011531", "00012626", "00010797", "00012077",
			  "00013199", "00012357", "00012452", "00012756", "00012752", "00010449", "00014690", "00012261", "00012793", "00011424", "00010461", "00012926", "00013638", "00014226",
			  "00013590", "00014755", "00010030", "00014804", "00011515", "00011903", "00011742", "00011887", "00010359", "00011179", "00014267", "00010681", "00013283", "00013959",
			  "00011633", "00010717", "00012079", "00014180", "00010731", "00013871", "00012073", "00010234", "00010220", "00010230", "00010040", "00013218", "00014201", "00010087",
			  "00012013", "00010918", "00010272", "00013356", "00011751", "00011796", "00013663", "00012847", "00011786", "00010311", "00014806", "00012583", "00014442", "00014137",
			  "00010194", "00011807", "00012224", "00011466", "00013028", "00014067", "00014718", "00012941", "00012487", "00013009", "00011087", "00013933", "00012393", "00012364",
			  "00010917", "00010451", "00010106", "00014193", "00014306", "00013195", "00010495", "00010515", "00012695", "00013815", "00010970", "00010595", "00012657", "00010414",
			  "00010580", "00011608", "00010574", "00013903", "00011778", "00010560", "00013921", "00010924", "00012577", "00013322", "00010279", "00011542", "00010367", "00012920",
			  "00012508", "00013708", "00013580", "00012841", "00010671", "00014223", "00013461", "00014364", "00013259", "00012985", "00014462", "00010031", "00011065", "00013363",
			  "00010411", "00010351", "00014465", "00011599", "00011090", "00012598", "00012571", "00012987", "00014460", "00013733", "00012321", "00010921", "00012707", "00010764",
			  "00012395", "00010379", "00012071", "00012215", "00013433", "00011093", "00013617", "00011748", "00010447", "00011612", "00011279", "00010058", "00011668", "00013141",
			  "00011964", "00013274", "00013664", "00010263", "00011735", "00011908", "00012688", "00012622", "00013925", "00013656", "00013620", "00013801", "00010504", "00011646",
			  "00011937", "00012896", "00011661", "00011728", "00014192", "00012753", "00012301", "00012031", "00012592", "00010277", "00012524", "00011446", "00011280", "00010659",
			  "00010242", "00013279", "00012852", "00014361", "00014053", "00010222", "00013919", "00013917", "00014456", "00010967", "00012663", "00014358", "00010964", "00010989",
			  "00012858", "00010481", "00012901", "00011958", "00012080", "00011972", "00010657", "00012609", "00011632", "00010405", "00012563", "00014195", "00013374", "00010738",
			  "00013700", "00012604", "00010906", "00013960", "00010541", "00010035", "00011573", "00010527", "00013923", "00012582", "00012693", "00011899", "00011591", "00012611",
			  "00014196", "00014550", "00012887", "00012601", "00011674", "00012422", "00010722", "00014353", "00010404", "00012205", "00014303", "00014191", "00010223", "00014286",
			  "00013636", "00011431", "00013583", "00010008", "00011239", "00012358", "00013571", "00010283", "00010446", "00012588", "00013916", "00013546", "00012262", "00012998",
			  "00010006", "00012589", "00012648", "00014458", "00013029", "00013014", "00010417", "00012738", "00012859", "00014452", "00012691", "00010568", "00013250", "00010883",
			  "00011147", "00012986", "00011898", "00014115", "00010939", "00010927", "00011519", "00011483", "00010741", "00010438", "00011925", "00014073", "00010582", "00012531",
			  "00010573", "00012171", "00013438", "00011994", "00014463", "00011677", "00012599", "00012580", "00010024", "00011607", "00010278", "00013217", "00011602", "00012684",
			  "00011973", "00011590", "00011990", "00013779", "00010431", "00012864", "00013939", "00011481", "00012840", "00011442", "00013237", "00012658", "00010477", "00012700",
			  "00013206", "00011029", "00010897", "00012373", "00012848", "00010468", "00012534", "00013935", "00012972", "00013643", "00012023", "00011656", "00012621", "00011926",
			  "00012298", "00012501", "00011110", "00012610", "00010799", "00010969", "00011717", "00011774", "00014194", "00010415", "00010354", "00010419", "00010250", "00012945",
			  "00010783", "00010262", "00010475", "00011484", "00012506", "00013434", "00012635", "00012634", "00010011", "00012069", "00011502", "00010026", "00014367", "00012538",
			  "00010496", "00011032", "00012088", "00013280", "00013281", "00013251", "00013798", "00012486", "00010916", "00012296", "00010032", "00010482", "00010558", "00010569",
			  "00010514", "00013216", "00010858", "00012485", "00012520", "00012572", "00010571", "00012507", "00010498", "00012496", "00011254", "00014187", "00012669", "00011096",
			  "00012514", "00010591", "00010696", "00012307", "00012484", "00013709", "00010935", "00010428", "00011912", "00013317", "00010956", "00011471", "00011547", "00011889",
			  "00011273", "00010908", "00010763", "00010791", "00013349", "00012849", "00012513", "00012099", "00011569", "00012503", "00011704", "00011963", "00010007", "00010112",
			  "00010028", "00011480", "00013631", "00014351", "00011692", "00010018", "00010593", "00012158", "00010752", "00012897", "00012078", "00013248", "00011206", "00011946",
			  "00010592", "00013778", "00012636", "00010113", "00010101", "00013604", "00011780", "00010932", "00010484", "00010926", "00010105", "00011272", "00012668", "00012675",
			  "00011506", "00010418", "00011453", "00012933", "00013826", "00011284", "00011112", "00011479", "00011714", "00010907", "00011781", "00012938", "00012512", "00011572",
			  "00010948", "00013907", "00012346", "00011897", "00010753", "00010010", "00011611", "00010963", "00011779", "00011247", "00013908", "00011628", "00010082", "00010938",
			  "00012614", "00011670", "00012391", "00010575", "00014054", "00010017", "00010744", "00012595", "00011443", "00010937", "00013193", "00011655", "00010668", "00012001",
			  "00013277", "00013642", "00010393", "00013809", "00012832", "00012866", "00012376", "00012862", "00012372", "00012600", "00011077", "00012851", "00012509", "00010773",
			  "00014197", "00010128", "00012608", "00010789", "00012016", "00011948", "00013247", "00010019", "00011673", "00013249", "00011853", "00010733", "00012217", "00011302",
			  "00012004", "00013541", "00010737", "00014352"
]

def writeLMDB(datasets, lmdb_path, validation):
	env = lmdb.open(lmdb_path, map_size=int(1e12))
	txn = env.begin(write=True)
	data = []

	for d in range(len(datasets)):
		if(datasets[d] == "MPI"):
			print(datasets[d])
			with open('json/MPI_annotations.json') as data_file:
				data_this = json.load(data_file)
				data_this = data_this['root']
				data = data + data_this
			numSample = len(data)
			print(numSample)
		elif(datasets[d] == "LEEDS"):
			print(datasets[d])
			with open('json/LEEDS_annotations.json') as data_file:
				data_this = json.load(data_file)
				data_this = data_this['root']
				data = data + data_this
			numSample = len(data)
			print(numSample)
		elif(datasets[d] == "FLIC"):
			datasets[d]
			with open('json/FLIC_annotations.json') as data_file:
				data_this = json.load(data_file)
				data_this = data_this['root']
				data = data + data_this
			numSample = len(data)
			print(numSample)
		elif datasets[d] == "hand143_panopticdb":
			print(datasets[d])
			with open('/data/dataset/hand143_panopticdb/hands_v143_14817.json') as data_file:
				data_this = json.load(data_file)
				data_this = data_this['root']
				data = data + data_this
			numSample = len(data)
			print(numSample)
		elif datasets[d] == "hand_piano":
			print(datasets[d])
			with open('/data/dataset/dataset731/hand_piano.json') as data_file:
				data_this = json.load(data_file)
				data_this = data_this['root']
				data = data + data_this
			numSample = len(data)
			print(numSample)
		elif datasets[d] == "hand_merge":
			print(datasets[d])
			with open('/home/ice/project/caffe-cpm/hand/merge.json') as data_file:
				data_this = json.load(data_file)
				data_this = data_this['root']
				data = data + data_this
			numSample = len(data)
			print(numSample)
	
	random_order = np.random.permutation(numSample).tolist()
	
	isValidationArray = [data[i]['isValidation'] for i in range(numSample)];
	if(validation == 1):
		totalWriteCount = isValidationArray.count(0.0);
	else:
		totalWriteCount = len(data)
	print('going to write %d images..' % totalWriteCount)
	writeCount = 0

	for count in range(numSample):
		# idx = count
		idx = random_order[count]
		if data[idx]['img_paths'].strip().split('/')[1].split('.jpg')[0] in error_data:
			print("Erorr data: ", data[idx]['img_paths'].strip().split('/')[1].split('.jpg')[0])
			# if writeCount > 499:
			# 	break
			continue
		if (data[idx]['isValidation'] != 0 and validation == 1):
			print('%d/%d skipped' % (count,idx))
			continue
		#print idx

		if "MPI" in data[idx]['dataset']:
			path_header = '../dataset/MPI/images/'
		elif "LEEDS" in data[idx]['dataset']:
			path_header = '../dataset/LEEDS/'
		elif "FLIC" in data[idx]['dataset']:
			path_header = '../dataset/FLIC/'
		elif "hand" in data[idx]['dataset']:
			path_header = '/data/dataset/hand143_panopticdb/'

		if datasets[0] == "hand143_panopticdb":
			img = cv2.imread(os.path.join(path_header, data[idx]['img_paths']))
		elif datasets[0] == "hand_piano" or datasets[0] == "hand_merge":
			img = cv2.imread(data[idx]['img_paths'])
		height = img.shape[0]
		width = img.shape[1]
		if(width < 64):
			img = cv2.copyMakeBorder(img,0,0,0,64-width,cv2.BORDER_CONSTANT,value=(128,128,128))
			print('saving padded image!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
			cv2.imwrite('padded_img.jpg', img)
			width = 64
			# no modify on width, because we want to keep information
		meta_data = np.zeros(shape=(height,width,1), dtype=np.uint8)
		#print type(img), img.shape
		#print type(meta_data), meta_data.shape
		clidx = 0 # current line index
		# dataset name (string)
		for i in range(len(data[idx]['dataset'])):
			meta_data[clidx][i] = ord(data[idx]['dataset'][i])
		clidx = clidx + 1
		# image height, image width
		height_binary = float2bytes(data[idx]['img_height'])
		for i in range(len(height_binary)):
			meta_data[clidx][i] = height_binary[i]
		width_binary = float2bytes(data[idx]['img_width'])
		for i in range(len(width_binary)):
			meta_data[clidx][4+i] = width_binary[i]
		clidx = clidx + 1
		# (a) isValidation(uint8), numOtherPeople (uint8), people_index (uint8), annolist_index (float), writeCount(float), totalWriteCount(float)
		meta_data[clidx][0] = data[idx]['isValidation']
		meta_data[clidx][1] = data[idx]['numOtherPeople']
		meta_data[clidx][2] = data[idx]['people_index']
		annolist_index_binary = float2bytes(data[idx]['annolist_index'])
		for i in range(len(annolist_index_binary)): # 3,4,5,6
			meta_data[clidx][3+i] = annolist_index_binary[i]
		count_binary = float2bytes(float(writeCount)) # note it's writecount instead of count!
		for i in range(len(count_binary)):
			meta_data[clidx][7+i] = count_binary[i]
		totalWriteCount_binary = float2bytes(float(totalWriteCount))
		for i in range(len(totalWriteCount_binary)):
			meta_data[clidx][11+i] = totalWriteCount_binary[i]
		nop = int(data[idx]['numOtherPeople'])
		clidx = clidx + 1
		# (b) objpos_x (float), objpos_y (float)
		objpos_binary = float2bytes(data[idx]['objpos'])
		for i in range(len(objpos_binary)):
			meta_data[clidx][i] = objpos_binary[i]
		clidx = clidx + 1
		# (c) scale_provided (float)
		scale_provided_binary = float2bytes(data[idx]['scale_provided'])
		for i in range(len(scale_provided_binary)):
			meta_data[clidx][i] = scale_provided_binary[i]
		clidx = clidx + 1
		# (d) joint_self (3*16) or (3*22) (float) (3 line)
		joints = np.asarray(data[idx]['joint_self']).T.tolist() # transpose to 3*16
		for i in range(len(joints)):
			row_binary = float2bytes(joints[i])
			for j in range(len(row_binary)):
				meta_data[clidx][j] = row_binary[j]
			clidx = clidx + 1
		# (e) check nop, prepare arrays
		if(nop!=0):
			if(nop==1):
				joint_other = [data[idx]['joint_others']]
				objpos_other = [data[idx]['objpos_other']]
				scale_provided_other = [data[idx]['scale_provided_other']]
			else:
				joint_other = data[idx]['joint_others']
				objpos_other = data[idx]['objpos_other']
				scale_provided_other = data[idx]['scale_provided_other']
			# (f) objpos_other_x (float), objpos_other_y (float) (nop lines)
			for i in range(nop):
				objpos_binary = float2bytes(objpos_other[i])
				for j in range(len(objpos_binary)):
					meta_data[clidx][j] = objpos_binary[j]
				clidx = clidx + 1
			# (g) scale_provided_other (nop floats in 1 line)
			scale_provided_other_binary = float2bytes(scale_provided_other)
			for j in range(len(scale_provided_other_binary)):
				meta_data[clidx][j] = scale_provided_other_binary[j]
			clidx = clidx + 1
			# (h) joint_others (3*16) (float) (nop*3 lines)
			for n in range(nop):
				joints = np.asarray(joint_other[n]).T.tolist() # transpose to 3*16
				for i in range(len(joints)):
					row_binary = float2bytes(joints[i])
					for j in range(len(row_binary)):
						meta_data[clidx][j] = row_binary[j]
					clidx = clidx + 1
		
		# print meta_data[0:12,0:48] 
		# total 7+4*nop lines
		img4ch = np.concatenate((img, meta_data), axis=2)
		img4ch = np.transpose(img4ch, (2, 0, 1))
		#print img4ch.shape
		datum = caffe.io.array_to_datum(img4ch, label=0)
		key = '%07d' % writeCount
		txn.put(key, datum.SerializeToString())
		if(writeCount % 1000 == 0):
			txn.commit()
			txn = env.begin(write=True)
		print('count: %d/ write count: %d/ randomized: %d/ all: %d' % (count,writeCount,idx,totalWriteCount))
		writeCount = writeCount + 1
		# if writeCount > 499:
		# 	break

	txn.commit()
	env.close()

def float2bytes(floats):
	if type(floats) is float:
		floats = [floats]
	if type(floats) is int:
		floats = [float(floats)]
	return struct.pack('%sf' % len(floats), *floats)

if __name__ == "__main__":
	writeLMDB(['hand_merge'], '/share/ice/hand_merge', 1)
	# writeLMDB(['hand_piano'], '/data/dataset/hand/hand_piano', 1)
	# writeLMDB(['hand143_panopticdb'], '/data/dataset/hand/hand143_panopticdb_part', 1)
	# writeLMDB(['MPI'], '/data1/CPM/lmdb/MPI_train_split', 1) # only include split training data (validation data is held out)
	#writeLMDB(['MPI'], 'lmdb/MPI_alltrain', 0)
	#writeLMDB(['LEEDS'], 'lmdb/LEEDS_PC', 0)
	#writeLMDB(['FLIC'], 'lmdb/FLIC', 0)

	#writeLMDB(['MPI', 'LEEDS'], 'lmdb/MPI_LEEDS_alltrain', 0) # joint dataset
